import { App, Editor, MarkdownView, Modal, Notice, Plugin, PluginSettingTab, ButtonComponent, Setting, debounce } from 'obsidian';

export interface IconAttrSetting {
	entry: string;
	image: string;
}

interface MetadataIconSettings {
	enableSnippet: boolean;
	propertiesVisible: string;
	propertiesInvisible: string;
	IconAttrList: Array<IconAttrSetting>;
}

const DEFAULT_SETTINGS: MetadataIconSettings = {
	enableSnippet: true,
	propertiesVisible: "",
	propertiesInvisible: "",
	IconAttrList: [],
}

export default class MetadataIcon extends Plugin {
	settings: MetadataIconSettings;

	async onload() {
		await this.loadSettings();
		this.addSettingTab(new MetadataHiderSettingTab(this.app, this));
	}

	onunload() {

	}


	async loadSettings() {
		this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
	}

	async saveSettings() {
		await this.saveData(this.settings);
		await genSnippetCSS(this);
	}


}

function genEntryCSS(s: IconAttrSetting): string {
	const selector = `data-property-key="${s.entry}"`;
	let body: string[] = [
		`.metadata-property[${selector}] .metadata-property-key::after {`,
		`	content: "";`,
		`	background-image: url("${s.image}");`,
		`	background-size: 20px;`,
		`	width: 20px;`,
		`	height: 20px;`,
		`	position: absolute;`,
		`	left: 3px;`,
		`	top: 6px;`,
		`	z-index: -100;`,
		`	opacity: 0.5;`,
		`	background-repeat: no-repeat;`,
		`}`,
		`.metadata-property[${selector}] svg {`,
		`	visibility: hidden;`,
		`}`,
		``,
	]
	return body.join('\n');
}

async function genSnippetCSS(plugin: MetadataIcon) {
	const content: string[] = [
		"/* * WARNING: This file will be overwritten by plugin `Metadata Icon`.",
		"   * DO NOT EDIT THIS FILE DIRECTLY!!!",
		"   * Do not edit this file directly!!!",
		"*/",
		"",
	];

	plugin.settings.IconAttrList.forEach((iconSetting, index) => {
		content.push(genEntryCSS(iconSetting));
	})

	const vault = plugin.app.vault;
	const ob_config_path = vault.configDir;
	const snippets_path = ob_config_path + "/snippets";
	const css_filename = "metadata-icon-auto-gen"
	const path = `${snippets_path}/${css_filename}.css`;
	if (!(await vault.adapter.exists(snippets_path))) { await vault.adapter.mkdir(snippets_path); }
	if (await vault.adapter.exists(path)) { await vault.adapter.remove(path) }
	await plugin.app.vault.create(path, content.join('\n'));

	// Activate snippet
	if (plugin.settings.enableSnippet) {
		// @ts-ignore
		const customCss = plugin.app.customCss;
		customCss.enabledSnippets.add(css_filename);
		customCss.requestLoadSnippets();
	}

	// Ensure Style Settings reads changes
	plugin.app.workspace.trigger("parse-style-settings");
}

class MetadataHiderSettingTab extends PluginSettingTab {
	plugin: MetadataIcon;
	debouncedGenerate: Function;

	constructor(app: App, plugin: MetadataIcon) {
		super(app, plugin);
		this.plugin = plugin;
		this.debouncedGenerate = debounce(this.generateSnippet, 1000, true);
		// Generate CSS immediately rather than 1 second - feels laggy
		this.generateSnippet();
	}

	async generateSnippet() {
		await genSnippetCSS(this.plugin);
	}

	display(): void {
		const { containerEl } = this;

		containerEl.empty();

		new Setting(containerEl)
			.setName('Enable snippet')
			.setDesc('')
			.addToggle((toggle) => {
				toggle
					.setValue(this.plugin.settings.enableSnippet)
					.onChange(async (value) => {
						this.plugin.settings.enableSnippet = value;
						await this.plugin.saveSettings();
						await genSnippetCSS(this.plugin);
					});
			});

		new Setting(containerEl)
			.setName("Add custom entry icon")
			.setDesc(
				"Input entry name and icon url."
			)
			.addButton((button: ButtonComponent) => {
				button.setTooltip("Add new request")
					.setButtonText("+")
					.setCta().onClick(async () => {
						this.plugin.settings.IconAttrList.push({
							entry: "",
							image: "",
						});
						await this.plugin.saveSettings();
						this.display();
					});
			})
		this.plugin.settings.IconAttrList.forEach((iconSetting, index) => {
			const s = new Setting(this.containerEl)
				.addSearch((cb) => {
					cb.setPlaceholder("entry name")
						.setValue(iconSetting.entry)
						.onChange(async (newValue) => {
							this.plugin.settings.IconAttrList[index].entry = newValue;
							await this.plugin.saveSettings();
						});
				})
				.addSearch((cb) => {
					cb.setPlaceholder("image url")
						.setValue(iconSetting.image)
						.onChange(async (newValue) => {
							this.plugin.settings.IconAttrList[index].image = newValue;
							await this.plugin.saveSettings();
						});
				})
				.addExtraButton((cb) => {
					cb.setIcon("cross")
						.setTooltip("Delete")
						.onClick(async () => {
							this.plugin.settings.IconAttrList.splice(index, 1);
							await this.plugin.saveSettings();
							this.display();
						});
				});
		});
	}
}
